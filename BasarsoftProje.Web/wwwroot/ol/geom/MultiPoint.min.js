/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/ol@6.12.0/geom/MultiPoint.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
var __extends=this&&this.__extends||function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)}}();import GeometryType from"./GeometryType.js";import Point from"./Point.js";import SimpleGeometry from"./SimpleGeometry.js";import{closestSquaredDistanceXY,containsXY}from"../extent.js";import{deflateCoordinates}from"./flat/deflate.js";import{extend}from"../array.js";import{inflateCoordinates}from"./flat/inflate.js";import{squaredDistance as squaredDx}from"../math.js";var MultiPoint=function(t){function e(e,o){var r=t.call(this)||this;return o&&!Array.isArray(e[0])?r.setFlatCoordinates(o,e):r.setCoordinates(e,o),r}return __extends(e,t),e.prototype.appendPoint=function(t){this.flatCoordinates?extend(this.flatCoordinates,t.getFlatCoordinates()):this.flatCoordinates=t.getFlatCoordinates().slice(),this.changed()},e.prototype.clone=function(){var t=new e(this.flatCoordinates.slice(),this.layout);return t.applyProperties(this),t},e.prototype.closestPointXY=function(t,e,o,r){if(r<closestSquaredDistanceXY(this.getExtent(),t,e))return r;for(var i=this.flatCoordinates,n=this.stride,s=0,a=i.length;s<a;s+=n){var l=squaredDx(t,e,i[s],i[s+1]);if(l<r){r=l;for(var f=0;f<n;++f)o[f]=i[s+f];o.length=n}}return r},e.prototype.getCoordinates=function(){return inflateCoordinates(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)},e.prototype.getPoint=function(t){var e=this.flatCoordinates?this.flatCoordinates.length/this.stride:0;return t<0||e<=t?null:new Point(this.flatCoordinates.slice(t*this.stride,(t+1)*this.stride),this.layout)},e.prototype.getPoints=function(){for(var t=this.flatCoordinates,e=this.layout,o=this.stride,r=[],i=0,n=t.length;i<n;i+=o){var s=new Point(t.slice(i,i+o),e);r.push(s)}return r},e.prototype.getType=function(){return GeometryType.MULTI_POINT},e.prototype.intersectsExtent=function(t){for(var e=this.flatCoordinates,o=this.stride,r=0,i=e.length;r<i;r+=o){var n=e[r],s=e[r+1];if(containsXY(t,n,s))return!0}return!1},e.prototype.setCoordinates=function(t,e){this.setLayout(e,t,1),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=deflateCoordinates(this.flatCoordinates,0,t,this.stride),this.changed()},e}(SimpleGeometry);export default MultiPoint;
//# sourceMappingURL=/sm/95312f0e0910f74f4b6ee88a4fd31b993a1ead96f54d8a86cf0e5514627b6718.map