/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/ol@6.12.0/geom/LineString.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
var __extends=this&&this.__extends||function(){var t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)};return function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function i(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(i.prototype=o.prototype,new i)}}();import GeometryLayout from"./GeometryLayout.js";import GeometryType from"./GeometryType.js";import SimpleGeometry from"./SimpleGeometry.js";import{assignClosestPoint,maxSquaredDelta}from"./flat/closest.js";import{closestSquaredDistanceXY}from"../extent.js";import{deflateCoordinates}from"./flat/deflate.js";import{douglasPeucker}from"./flat/simplify.js";import{extend}from"../array.js";import{forEach as forEachSegment}from"./flat/segments.js";import{inflateCoordinates}from"./flat/inflate.js";import{interpolatePoint,lineStringCoordinateAtM}from"./flat/interpolate.js";import{intersectsLineString}from"./flat/intersectsextent.js";import{lineStringLength}from"./flat/length.js";var LineString=function(t){function e(e,o){var i=t.call(this)||this;return i.flatMidpoint_=null,i.flatMidpointRevision_=-1,i.maxDelta_=-1,i.maxDeltaRevision_=-1,void 0===o||Array.isArray(e[0])?i.setCoordinates(e,o):i.setFlatCoordinates(o,e),i}return __extends(e,t),e.prototype.appendCoordinate=function(t){this.flatCoordinates?extend(this.flatCoordinates,t):this.flatCoordinates=t.slice(),this.changed()},e.prototype.clone=function(){var t=new e(this.flatCoordinates.slice(),this.layout);return t.applyProperties(this),t},e.prototype.closestPointXY=function(t,e,o,i){return i<closestSquaredDistanceXY(this.getExtent(),t,e)?i:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(maxSquaredDelta(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),assignClosestPoint(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,this.maxDelta_,!1,t,e,o,i))},e.prototype.forEachSegment=function(t){return forEachSegment(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t)},e.prototype.getCoordinateAtM=function(t,e){if(this.layout!=GeometryLayout.XYM&&this.layout!=GeometryLayout.XYZM)return null;var o=void 0!==e&&e;return lineStringCoordinateAtM(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,o)},e.prototype.getCoordinates=function(){return inflateCoordinates(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)},e.prototype.getCoordinateAt=function(t,e){return interpolatePoint(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,e,this.stride)},e.prototype.getLength=function(){return lineStringLength(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)},e.prototype.getFlatMidpoint=function(){return this.flatMidpointRevision_!=this.getRevision()&&(this.flatMidpoint_=this.getCoordinateAt(.5,this.flatMidpoint_),this.flatMidpointRevision_=this.getRevision()),this.flatMidpoint_},e.prototype.getSimplifiedGeometryInternal=function(t){var o=[];return o.length=douglasPeucker(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,o,0),new e(o,GeometryLayout.XY)},e.prototype.getType=function(){return GeometryType.LINE_STRING},e.prototype.intersectsExtent=function(t){return intersectsLineString(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t)},e.prototype.setCoordinates=function(t,e){this.setLayout(e,t,1),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=deflateCoordinates(this.flatCoordinates,0,t,this.stride),this.changed()},e}(SimpleGeometry);export default LineString;
//# sourceMappingURL=/sm/e839a7cd2fdcc0c1dc8e9d688fe5848e81d34ad3bb92905b4d0e72af5b1d6b8a.map