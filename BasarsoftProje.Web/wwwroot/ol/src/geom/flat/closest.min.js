/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/ol@6.12.0/src/geom/flat/closest.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{lerp,squaredDistance as squaredDx}from"../../math.js";function assignClosest(t,e,r,n,s,a,o){const l=t[e],i=t[e+1],u=t[r]-l,f=t[r+1]-i;let g;if(0===u&&0===f)g=e;else{const c=((s-l)*u+(a-i)*f)/(u*u+f*f);if(c>1)g=r;else{if(c>0){for(let s=0;s<n;++s)o[s]=lerp(t[e+s],t[r+s],c);return void(o.length=n)}g=e}}for(let e=0;e<n;++e)o[e]=t[g+e];o.length=n}export function maxSquaredDelta(t,e,r,n,s){let a=t[e],o=t[e+1];for(e+=n;e<r;e+=n){const r=t[e],n=t[e+1],l=squaredDx(a,o,r,n);l>s&&(s=l),a=r,o=n}return s}export function arrayMaxSquaredDelta(t,e,r,n,s){for(let a=0,o=r.length;a<o;++a){const o=r[a];s=maxSquaredDelta(t,e,o,n,s),e=o}return s}export function multiArrayMaxSquaredDelta(t,e,r,n,s){for(let a=0,o=r.length;a<o;++a){const o=r[a];s=arrayMaxSquaredDelta(t,e,o,n,s),e=o[o.length-1]}return s}export function assignClosestPoint(t,e,r,n,s,a,o,l,i,u,f){if(e==r)return u;let g,c;if(0===s){if(c=squaredDx(o,l,t[e],t[e+1]),c<u){for(g=0;g<n;++g)i[g]=t[e+g];return i.length=n,c}return u}const x=f||[NaN,NaN];let h=e+n;for(;h<r;)if(assignClosest(t,h-n,h,n,o,l,x),c=squaredDx(o,l,x[0],x[1]),c<u){for(u=c,g=0;g<n;++g)i[g]=x[g];i.length=n,h+=n}else h+=n*Math.max((Math.sqrt(c)-Math.sqrt(u))/s|0,1);if(a&&(assignClosest(t,r-n,e,n,o,l,x),c=squaredDx(o,l,x[0],x[1]),c<u)){for(u=c,g=0;g<n;++g)i[g]=x[g];i.length=n}return u}export function assignClosestArrayPoint(t,e,r,n,s,a,o,l,i,u,f){const g=f||[NaN,NaN];for(let f=0,c=r.length;f<c;++f){const c=r[f];u=assignClosestPoint(t,e,c,n,s,a,o,l,i,u,g),e=c}return u}export function assignClosestMultiArrayPoint(t,e,r,n,s,a,o,l,i,u,f){const g=f||[NaN,NaN];for(let f=0,c=r.length;f<c;++f){const c=r[f];u=assignClosestArrayPoint(t,e,c,n,s,a,o,l,i,u,g),e=c[c.length-1]}return u}
//# sourceMappingURL=/sm/107df7ab8f047e613c353f59ada2cbe548c07364c0339cd4dff2acaf095bfe55.map