/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/ol@6.12.0/src/geom/LineString.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import GeometryLayout from"./GeometryLayout.js";import GeometryType from"./GeometryType.js";import SimpleGeometry from"./SimpleGeometry.js";import{assignClosestPoint,maxSquaredDelta}from"./flat/closest.js";import{closestSquaredDistanceXY}from"../extent.js";import{deflateCoordinates}from"./flat/deflate.js";import{douglasPeucker}from"./flat/simplify.js";import{extend}from"../array.js";import{forEach as forEachSegment}from"./flat/segments.js";import{inflateCoordinates}from"./flat/inflate.js";import{interpolatePoint,lineStringCoordinateAtM}from"./flat/interpolate.js";import{intersectsLineString}from"./flat/intersectsextent.js";import{lineStringLength}from"./flat/length.js";class LineString extends SimpleGeometry{constructor(t,e){super(),this.flatMidpoint_=null,this.flatMidpointRevision_=-1,this.maxDelta_=-1,this.maxDeltaRevision_=-1,void 0===e||Array.isArray(t[0])?this.setCoordinates(t,e):this.setFlatCoordinates(e,t)}appendCoordinate(t){this.flatCoordinates?extend(this.flatCoordinates,t):this.flatCoordinates=t.slice(),this.changed()}clone(){const t=new LineString(this.flatCoordinates.slice(),this.layout);return t.applyProperties(this),t}closestPointXY(t,e,i,s){return s<closestSquaredDistanceXY(this.getExtent(),t,e)?s:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(maxSquaredDelta(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),assignClosestPoint(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,this.maxDelta_,!1,t,e,i,s))}forEachSegment(t){return forEachSegment(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t)}getCoordinateAtM(t,e){if(this.layout!=GeometryLayout.XYM&&this.layout!=GeometryLayout.XYZM)return null;const i=void 0!==e&&e;return lineStringCoordinateAtM(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,i)}getCoordinates(){return inflateCoordinates(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)}getCoordinateAt(t,e){return interpolatePoint(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,e,this.stride)}getLength(){return lineStringLength(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)}getFlatMidpoint(){return this.flatMidpointRevision_!=this.getRevision()&&(this.flatMidpoint_=this.getCoordinateAt(.5,this.flatMidpoint_),this.flatMidpointRevision_=this.getRevision()),this.flatMidpoint_}getSimplifiedGeometryInternal(t){const e=[];return e.length=douglasPeucker(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,e,0),new LineString(e,GeometryLayout.XY)}getType(){return GeometryType.LINE_STRING}intersectsExtent(t){return intersectsLineString(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t)}setCoordinates(t,e){this.setLayout(e,t,1),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=deflateCoordinates(this.flatCoordinates,0,t,this.stride),this.changed()}}export default LineString;
//# sourceMappingURL=/sm/c94551c8cf09ad22d8b9c3c50681f4be855ba6788f0ad6ed4e157d26ae305806.map