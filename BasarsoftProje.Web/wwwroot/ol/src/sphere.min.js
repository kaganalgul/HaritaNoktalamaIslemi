/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/ol@6.12.0/src/sphere.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import GeometryType from"./geom/GeometryType.js";import{toDegrees,toRadians}from"./math.js";export const DEFAULT_RADIUS=6371008.8;export function getDistance(e,t,a){const r=a||6371008.8,o=toRadians(e[1]),n=toRadians(t[1]),s=(n-o)/2,h=toRadians(t[0]-e[0])/2,c=Math.sin(s)*Math.sin(s)+Math.sin(h)*Math.sin(h)*Math.cos(o)*Math.cos(n);return 2*r*Math.atan2(Math.sqrt(c),Math.sqrt(1-c))}function getLengthInternal(e,t){let a=0;for(let r=0,o=e.length;r<o-1;++r)a+=getDistance(e[r],e[r+1],t);return a}export function getLength(e,t){const a=t||{},r=a.radius||6371008.8,o=a.projection||"EPSG:3857",n=e.getType();n!==GeometryType.GEOMETRY_COLLECTION&&(e=e.clone().transform(o,"EPSG:4326"));let s,h,c,g,y,i,T=0;switch(n){case GeometryType.POINT:case GeometryType.MULTI_POINT:break;case GeometryType.LINE_STRING:case GeometryType.LINEAR_RING:s=e.getCoordinates(),T=getLengthInternal(s,r);break;case GeometryType.MULTI_LINE_STRING:case GeometryType.POLYGON:for(s=e.getCoordinates(),c=0,g=s.length;c<g;++c)T+=getLengthInternal(s[c],r);break;case GeometryType.MULTI_POLYGON:for(s=e.getCoordinates(),c=0,g=s.length;c<g;++c)for(h=s[c],y=0,i=h.length;y<i;++y)T+=getLengthInternal(h[y],r);break;case GeometryType.GEOMETRY_COLLECTION:{const a=e.getGeometries();for(c=0,g=a.length;c<g;++c)T+=getLength(a[c],t);break}default:throw new Error("Unsupported geometry type: "+n)}return T}function getAreaInternal(e,t){let a=0;const r=e.length;let o=e[r-1][0],n=e[r-1][1];for(let t=0;t<r;t++){const r=e[t][0],s=e[t][1];a+=toRadians(r-o)*(2+Math.sin(toRadians(n))+Math.sin(toRadians(s))),o=r,n=s}return a*t*t/2}export function getArea(e,t){const a=t||{},r=a.radius||6371008.8,o=a.projection||"EPSG:3857",n=e.getType();n!==GeometryType.GEOMETRY_COLLECTION&&(e=e.clone().transform(o,"EPSG:4326"));let s,h,c,g,y,i,T=0;switch(n){case GeometryType.POINT:case GeometryType.MULTI_POINT:case GeometryType.LINE_STRING:case GeometryType.MULTI_LINE_STRING:case GeometryType.LINEAR_RING:break;case GeometryType.POLYGON:for(s=e.getCoordinates(),T=Math.abs(getAreaInternal(s[0],r)),c=1,g=s.length;c<g;++c)T-=Math.abs(getAreaInternal(s[c],r));break;case GeometryType.MULTI_POLYGON:for(s=e.getCoordinates(),c=0,g=s.length;c<g;++c)for(h=s[c],T+=Math.abs(getAreaInternal(h[0],r)),y=1,i=h.length;y<i;++y)T-=Math.abs(getAreaInternal(h[y],r));break;case GeometryType.GEOMETRY_COLLECTION:{const a=e.getGeometries();for(c=0,g=a.length;c<g;++c)T+=getArea(a[c],t);break}default:throw new Error("Unsupported geometry type: "+n)}return T}export function offset(e,t,a,r){const o=r||6371008.8,n=toRadians(e[1]),s=toRadians(e[0]),h=t/o,c=Math.asin(Math.sin(n)*Math.cos(h)+Math.cos(n)*Math.sin(h)*Math.cos(a)),g=s+Math.atan2(Math.sin(a)*Math.sin(h)*Math.cos(n),Math.cos(h)-Math.sin(n)*Math.sin(c));return[toDegrees(g),toDegrees(c)]}
//# sourceMappingURL=/sm/e48cc0b45c177ed75476f6957ad7463c3c69441a11405c33650ce4dec22ea77b.map