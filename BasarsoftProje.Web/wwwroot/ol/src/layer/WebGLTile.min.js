/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/ol@6.12.0/src/layer/WebGLTile.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import BaseTileLayer from"./BaseTile.js";import LayerProperty from"../layer/Property.js";import WebGLTileLayerRenderer,{Attributes,Uniforms}from"../renderer/webgl/TileLayer.js";import{PALETTE_TEXTURE_ARRAY,ValueTypes,expressionToGlsl,getStringNumberEquivalent,uniformNameForVariable}from"../style/expressions.js";import{assign}from"../obj.js";function parseStyle(e,r){const t=`\n    attribute vec2 ${Attributes.TEXTURE_COORD};\n    uniform mat4 ${Uniforms.TILE_TRANSFORM};\n    uniform float ${Uniforms.DEPTH};\n\n    varying vec2 v_textureCoord;\n\n    void main() {\n      v_textureCoord = ${Attributes.TEXTURE_COORD};\n      gl_Position = ${Uniforms.TILE_TRANSFORM} * vec4(${Attributes.TEXTURE_COORD}, ${Uniforms.DEPTH}, 1.0);\n    }\n  `,s={inFragmentShader:!0,variables:[],attributes:[],stringLiteralsMap:{},functions:{},bandCount:r},n=[];if(void 0!==e.color){const r=expressionToGlsl(s,e.color,ValueTypes.COLOR);n.push(`color = ${r};`)}if(void 0!==e.contrast){const r=expressionToGlsl(s,e.contrast,ValueTypes.NUMBER);n.push(`color.rgb = clamp((${r} + 1.0) * color.rgb - (${r} / 2.0), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`)}if(void 0!==e.exposure){const r=expressionToGlsl(s,e.exposure,ValueTypes.NUMBER);n.push(`color.rgb = clamp((${r} + 1.0) * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`)}if(void 0!==e.saturation){const r=expressionToGlsl(s,e.saturation,ValueTypes.NUMBER);n.push(`\n      float saturation = ${r} + 1.0;\n      float sr = (1.0 - saturation) * 0.2126;\n      float sg = (1.0 - saturation) * 0.7152;\n      float sb = (1.0 - saturation) * 0.0722;\n      mat3 saturationMatrix = mat3(\n        sr + saturation, sr, sr,\n        sg, sg + saturation, sg,\n        sb, sb, sb + saturation\n      );\n      color.rgb = clamp(saturationMatrix * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));\n    `)}if(void 0!==e.gamma){const r=expressionToGlsl(s,e.gamma,ValueTypes.NUMBER);n.push(`color.rgb = pow(color.rgb, vec3(1.0 / ${r}));`)}if(void 0!==e.brightness){const r=expressionToGlsl(s,e.brightness,ValueTypes.NUMBER);n.push(`color.rgb = clamp(color.rgb + ${r}, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`)}const o={},a=s.variables.length;if(a>1&&!e.variables)throw new Error(`Missing variables in style (expected ${s.variables})`);for(let r=0;r<a;++r){const t=s.variables[r];if(!(t in e.variables))throw new Error(`Missing '${t}' in style variables`);o[uniformNameForVariable(t)]=function(){let r=e.variables[t];return"string"==typeof r&&(r=getStringNumberEquivalent(s,r)),void 0!==r?r:-9999999}}const i=Object.keys(o).map((function(e){return`uniform float ${e};`})),l=Math.ceil(r/4);i.push(`uniform sampler2D ${Uniforms.TILE_TEXTURE_ARRAY}[${l}];`),s.paletteTextures&&i.push(`uniform sampler2D ${PALETTE_TEXTURE_ARRAY}[${s.paletteTextures.length}];`);const u=Object.keys(s.functions).map((function(e){return s.functions[e]}));return{vertexShader:t,fragmentShader:`\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    #else\n    precision mediump float;\n    #endif\n\n    varying vec2 v_textureCoord;\n    uniform float ${Uniforms.TRANSITION_ALPHA};\n    uniform float ${Uniforms.TEXTURE_PIXEL_WIDTH};\n    uniform float ${Uniforms.TEXTURE_PIXEL_HEIGHT};\n    uniform float ${Uniforms.RESOLUTION};\n    uniform float ${Uniforms.ZOOM};\n\n    ${i.join("\n")}\n\n    ${u.join("\n")}\n\n    void main() {\n      vec4 color = texture2D(${Uniforms.TILE_TEXTURE_ARRAY}[0],  v_textureCoord);\n\n      ${n.join("\n")}\n\n      if (color.a == 0.0) {\n        discard;\n      }\n\n      gl_FragColor = color;\n      gl_FragColor.rgb *= gl_FragColor.a;\n      gl_FragColor *= ${Uniforms.TRANSITION_ALPHA};\n    }`,uniforms:o,paletteTextures:s.paletteTextures}}class WebGLTileLayer extends BaseTileLayer{constructor(e){const r=e?assign({},e):{},t=r.style||{};delete r.style;const s=r.cacheSize;delete r.cacheSize,super(r),this.style_=t,this.cacheSize_=s,this.styleVariables_=this.style_.variables||{},this.addChangeListener(LayerProperty.SOURCE,this.handleSourceUpdate_)}handleSourceUpdate_(){this.setStyle(this.style_)}getSourceBandCount_(){const e=this.getSource();return e&&"bandCount"in e?e.bandCount:4}createRenderer(){const e=parseStyle(this.style_,this.getSourceBandCount_());return new WebGLTileLayerRenderer(this,{vertexShader:e.vertexShader,fragmentShader:e.fragmentShader,uniforms:e.uniforms,cacheSize:this.cacheSize_,paletteTextures:e.paletteTextures})}setStyle(e){this.style_=e;const r=parseStyle(this.style_,this.getSourceBandCount_());this.getRenderer().reset({vertexShader:r.vertexShader,fragmentShader:r.fragmentShader,uniforms:r.uniforms,paletteTextures:r.paletteTextures}),this.changed()}updateStyleVariables(e){assign(this.styleVariables_,e),this.changed()}}WebGLTileLayer.prototype.dispose;export default WebGLTileLayer;
//# sourceMappingURL=/sm/94792f8f52c6a6f5d67cdc91dc949e0e9c66135439ce25853adf290e536424c6.map