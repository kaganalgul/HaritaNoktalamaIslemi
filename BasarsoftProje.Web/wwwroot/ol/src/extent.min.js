/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/ol@6.12.0/src/extent.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import Corner from"./extent/Corner.js";import Relationship from"./extent/Relationship.js";import{assert}from"./asserts.js";export function boundingExtent(t){const e=createEmpty();for(let n=0,r=t.length;n<r;++n)extendCoordinate(e,t[n]);return e}function _boundingExtentXYs(t,e,n){return createOrUpdate(Math.min.apply(null,t),Math.min.apply(null,e),Math.max.apply(null,t),Math.max.apply(null,e),n)}export function buffer(t,e,n){return n?(n[0]=t[0]-e,n[1]=t[1]-e,n[2]=t[2]+e,n[3]=t[3]+e,n):[t[0]-e,t[1]-e,t[2]+e,t[3]+e]}export function clone(t,e){return e?(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e):t.slice()}export function closestSquaredDistanceXY(t,e,n){let r,o;return r=e<t[0]?t[0]-e:t[2]<e?e-t[2]:0,o=n<t[1]?t[1]-n:t[3]<n?n-t[3]:0,r*r+o*o}export function containsCoordinate(t,e){return containsXY(t,e[0],e[1])}export function containsExtent(t,e){return t[0]<=e[0]&&e[2]<=t[2]&&t[1]<=e[1]&&e[3]<=t[3]}export function containsXY(t,e,n){return t[0]<=e&&e<=t[2]&&t[1]<=n&&n<=t[3]}export function coordinateRelationship(t,e){const n=t[0],r=t[1],o=t[2],i=t[3],a=e[0],p=e[1];let u=Relationship.UNKNOWN;return a<n?u|=Relationship.LEFT:a>o&&(u|=Relationship.RIGHT),p<r?u|=Relationship.BELOW:p>i&&(u|=Relationship.ABOVE),u===Relationship.UNKNOWN&&(u=Relationship.INTERSECTING),u}export function createEmpty(){return[1/0,1/0,-1/0,-1/0]}export function createOrUpdate(t,e,n,r,o){return o?(o[0]=t,o[1]=e,o[2]=n,o[3]=r,o):[t,e,n,r]}export function createOrUpdateEmpty(t){return createOrUpdate(1/0,1/0,-1/0,-1/0,t)}export function createOrUpdateFromCoordinate(t,e){const n=t[0],r=t[1];return createOrUpdate(n,r,n,r,e)}export function createOrUpdateFromCoordinates(t,e){return extendCoordinates(createOrUpdateEmpty(e),t)}export function createOrUpdateFromFlatCoordinates(t,e,n,r,o){return extendFlatCoordinates(createOrUpdateEmpty(o),t,e,n,r)}export function createOrUpdateFromRings(t,e){return extendRings(createOrUpdateEmpty(e),t)}export function equals(t,e){return t[0]==e[0]&&t[2]==e[2]&&t[1]==e[1]&&t[3]==e[3]}export function approximatelyEquals(t,e,n){return Math.abs(t[0]-e[0])<n&&Math.abs(t[2]-e[2])<n&&Math.abs(t[1]-e[1])<n&&Math.abs(t[3]-e[3])<n}export function extend(t,e){return e[0]<t[0]&&(t[0]=e[0]),e[2]>t[2]&&(t[2]=e[2]),e[1]<t[1]&&(t[1]=e[1]),e[3]>t[3]&&(t[3]=e[3]),t}export function extendCoordinate(t,e){e[0]<t[0]&&(t[0]=e[0]),e[0]>t[2]&&(t[2]=e[0]),e[1]<t[1]&&(t[1]=e[1]),e[1]>t[3]&&(t[3]=e[1])}export function extendCoordinates(t,e){for(let n=0,r=e.length;n<r;++n)extendCoordinate(t,e[n]);return t}export function extendFlatCoordinates(t,e,n,r,o){for(;n<r;n+=o)extendXY(t,e[n],e[n+1]);return t}export function extendRings(t,e){for(let n=0,r=e.length;n<r;++n)extendCoordinates(t,e[n]);return t}export function extendXY(t,e,n){t[0]=Math.min(t[0],e),t[1]=Math.min(t[1],n),t[2]=Math.max(t[2],e),t[3]=Math.max(t[3],n)}export function forEachCorner(t,e){let n;return n=e(getBottomLeft(t)),n||(n=e(getBottomRight(t)),n||(n=e(getTopRight(t)),n||(n=e(getTopLeft(t)),n||!1)))}export function getArea(t){let e=0;return isEmpty(t)||(e=getWidth(t)*getHeight(t)),e}export function getBottomLeft(t){return[t[0],t[1]]}export function getBottomRight(t){return[t[2],t[1]]}export function getCenter(t){return[(t[0]+t[2])/2,(t[1]+t[3])/2]}export function getCorner(t,e){let n;return e===Corner.BOTTOM_LEFT?n=getBottomLeft(t):e===Corner.BOTTOM_RIGHT?n=getBottomRight(t):e===Corner.TOP_LEFT?n=getTopLeft(t):e===Corner.TOP_RIGHT?n=getTopRight(t):assert(!1,13),n}export function getEnlargedArea(t,e){const n=Math.min(t[0],e[0]),r=Math.min(t[1],e[1]);return(Math.max(t[2],e[2])-n)*(Math.max(t[3],e[3])-r)}export function getForViewAndSize(t,e,n,r,o){const i=e*r[0]/2,a=e*r[1]/2,p=Math.cos(n),u=Math.sin(n),c=i*p,s=i*u,x=a*p,f=a*u,h=t[0],l=t[1],g=h-c+f,d=h-c-f,m=h+c-f,R=h+c+f,E=l-s-x,O=l-s+x,T=l+s+x,C=l+s-x;return createOrUpdate(Math.min(g,d,m,R),Math.min(E,O,T,C),Math.max(g,d,m,R),Math.max(E,O,T,C),o)}export function getHeight(t){return t[3]-t[1]}export function getIntersectionArea(t,e){return getArea(getIntersection(t,e))}export function getIntersection(t,e,n){const r=n||createEmpty();return intersects(t,e)?(t[0]>e[0]?r[0]=t[0]:r[0]=e[0],t[1]>e[1]?r[1]=t[1]:r[1]=e[1],t[2]<e[2]?r[2]=t[2]:r[2]=e[2],t[3]<e[3]?r[3]=t[3]:r[3]=e[3]):createOrUpdateEmpty(r),r}export function getMargin(t){return getWidth(t)+getHeight(t)}export function getSize(t){return[t[2]-t[0],t[3]-t[1]]}export function getTopLeft(t){return[t[0],t[3]]}export function getTopRight(t){return[t[2],t[3]]}export function getWidth(t){return t[2]-t[0]}export function intersects(t,e){return t[0]<=e[2]&&t[2]>=e[0]&&t[1]<=e[3]&&t[3]>=e[1]}export function isEmpty(t){return t[2]<t[0]||t[3]<t[1]}export function returnOrUpdate(t,e){return e?(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e):t}export function scaleFromCenter(t,e){const n=(t[2]-t[0])/2*(e-1),r=(t[3]-t[1])/2*(e-1);t[0]-=n,t[2]+=n,t[1]-=r,t[3]+=r}export function intersectsSegment(t,e,n){let r=!1;const o=coordinateRelationship(t,e),i=coordinateRelationship(t,n);if(o===Relationship.INTERSECTING||i===Relationship.INTERSECTING)r=!0;else{const a=t[0],p=t[1],u=t[2],c=t[3],s=e[0],x=e[1],f=n[0],h=n[1],l=(h-x)/(f-s);let g,d;i&Relationship.ABOVE&&!(o&Relationship.ABOVE)&&(g=f-(h-c)/l,r=g>=a&&g<=u),r||!(i&Relationship.RIGHT)||o&Relationship.RIGHT||(d=h-(f-u)*l,r=d>=p&&d<=c),r||!(i&Relationship.BELOW)||o&Relationship.BELOW||(g=f-(h-p)/l,r=g>=a&&g<=u),r||!(i&Relationship.LEFT)||o&Relationship.LEFT||(d=h-(f-a)*l,r=d>=p&&d<=c)}return r}export function applyTransform(t,e,n,r){let o=[];if(r>1){const e=t[2]-t[0],n=t[3]-t[1];for(let i=0;i<r;++i)o.push(t[0]+e*i/r,t[1],t[2],t[1]+n*i/r,t[2]-e*i/r,t[3],t[0],t[3]-n*i/r)}else o=[t[0],t[1],t[2],t[1],t[2],t[3],t[0],t[3]];e(o,o,2);const i=[],a=[];for(let t=0,e=o.length;t<e;t+=2)i.push(o[t]),a.push(o[t+1]);return _boundingExtentXYs(i,a,n)}export function wrapX(t,e){const n=e.getExtent(),r=getCenter(t);if(e.canWrapX()&&(r[0]<n[0]||r[0]>=n[2])){const e=getWidth(n),o=Math.floor((r[0]-n[0])/e)*e;t[0]-=o,t[2]-=o}return t}
//# sourceMappingURL=/sm/55f80c5efe25177e0efc0f3c0945148b5373225ba925a553732bade358f62d9e.map