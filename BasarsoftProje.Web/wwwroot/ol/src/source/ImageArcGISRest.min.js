/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/ol@6.12.0/src/source/ImageArcGISRest.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import EventType from"../events/EventType.js";import ImageSource,{defaultImageLoadFunction}from"./Image.js";import ImageWrapper from"../Image.js";import{appendParams}from"../uri.js";import{assert}from"../asserts.js";import{assign}from"../obj.js";import{containsExtent,getHeight,getWidth}from"../extent.js";class ImageArcGISRest extends ImageSource{constructor(t){const i=t||{};let e=void 0===i.imageSmoothing||i.imageSmoothing;void 0!==i.interpolate&&(e=i.interpolate),super({attributions:i.attributions,interpolate:e,projection:i.projection,resolutions:i.resolutions}),this.crossOrigin_=void 0!==i.crossOrigin?i.crossOrigin:null,this.hidpi_=void 0===i.hidpi||i.hidpi,this.url_=i.url,this.imageLoadFunction_=void 0!==i.imageLoadFunction?i.imageLoadFunction:defaultImageLoadFunction,this.params_=i.params||{},this.image_=null,this.imageSize_=[0,0],this.renderedRevision_=0,this.ratio_=void 0!==i.ratio?i.ratio:1.5}getParams(){return this.params_}getImageInternal(t,i,e,s){if(void 0===this.url_)return null;i=this.findNearestResolution(i),e=this.hidpi_?e:1;const a=this.image_;if(a&&this.renderedRevision_==this.getRevision()&&a.getResolution()==i&&a.getPixelRatio()==e&&containsExtent(a.getExtent(),t))return a;const r={F:"image",FORMAT:"PNG32",TRANSPARENT:!0};assign(r,this.params_);const o=((t=t.slice())[0]+t[2])/2,n=(t[1]+t[3])/2;if(1!=this.ratio_){const i=this.ratio_*getWidth(t)/2,e=this.ratio_*getHeight(t)/2;t[0]=o-i,t[1]=n-e,t[2]=o+i,t[3]=n+e}const g=i/e,h=Math.ceil(getWidth(t)/g),m=Math.ceil(getHeight(t)/g);t[0]=o-g*h/2,t[2]=o+g*h/2,t[1]=n-g*m/2,t[3]=n+g*m/2,this.imageSize_[0]=h,this.imageSize_[1]=m;const d=this.getRequestUrl_(t,this.imageSize_,e,s,r);return this.image_=new ImageWrapper(t,i,e,d,this.crossOrigin_,this.imageLoadFunction_),this.renderedRevision_=this.getRevision(),this.image_.addEventListener(EventType.CHANGE,this.handleImageChange.bind(this)),this.image_}getImageLoadFunction(){return this.imageLoadFunction_}getRequestUrl_(t,i,e,s,a){const r=s.getCode().split(/:(?=\d+$)/).pop();a.SIZE=i[0]+","+i[1],a.BBOX=t.join(","),a.BBOXSR=r,a.IMAGESR=r,a.DPI=Math.round(90*e);const o=this.url_,n=o.replace(/MapServer\/?$/,"MapServer/export").replace(/ImageServer\/?$/,"ImageServer/exportImage");return n==o&&assert(!1,50),appendParams(n,a)}getUrl(){return this.url_}setImageLoadFunction(t){this.image_=null,this.imageLoadFunction_=t,this.changed()}setUrl(t){t!=this.url_&&(this.url_=t,this.image_=null,this.changed())}updateParams(t){assign(this.params_,t),this.image_=null,this.changed()}}export default ImageArcGISRest;
//# sourceMappingURL=/sm/b2f72fc92ca4b317a8c6f9919652c3c6e669324a4e84ca2651c4b6a9354f20af.map