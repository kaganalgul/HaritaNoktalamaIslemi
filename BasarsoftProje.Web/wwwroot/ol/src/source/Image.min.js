/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/ol@6.12.0/src/source/Image.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import Event from"../events/Event.js";import ImageState from"../ImageState.js";import ReprojImage from"../reproj/Image.js";import Source from"./Source.js";import{ENABLE_RASTER_REPROJECTION}from"../reproj/common.js";import{abstract}from"../util.js";import{equals}from"../extent.js";import{equivalent}from"../proj.js";import{linearFindNearest}from"../array.js";export const ImageSourceEventType={IMAGELOADSTART:"imageloadstart",IMAGELOADEND:"imageloadend",IMAGELOADERROR:"imageloaderror"};export class ImageSourceEvent extends Event{constructor(e,t){super(e),this.image=t}}class ImageSource extends Source{constructor(e){let t=void 0===e.imageSmoothing||e.imageSmoothing;void 0!==e.interpolate&&(t=e.interpolate),super({attributions:e.attributions,projection:e.projection,state:e.state,interpolate:t}),this.on,this.once,this.un,this.resolutions_=void 0!==e.resolutions?e.resolutions:null,this.reprojectedImage_=null,this.reprojectedRevision_=0}getResolutions(){return this.resolutions_}findNearestResolution(e){if(this.resolutions_){const t=linearFindNearest(this.resolutions_,e,0);e=this.resolutions_[t]}return e}getImage(e,t,r,o){const i=this.getProjection();if(ENABLE_RASTER_REPROJECTION&&i&&o&&!equivalent(i,o)){if(this.reprojectedImage_){if(this.reprojectedRevision_==this.getRevision()&&equivalent(this.reprojectedImage_.getProjection(),o)&&this.reprojectedImage_.getResolution()==t&&equals(this.reprojectedImage_.getExtent(),e))return this.reprojectedImage_;this.reprojectedImage_.dispose(),this.reprojectedImage_=null}return this.reprojectedImage_=new ReprojImage(i,o,e,t,r,function(e,t,r){return this.getImageInternal(e,t,r,i)}.bind(this),this.getInterpolate()),this.reprojectedRevision_=this.getRevision(),this.reprojectedImage_}return i&&(o=i),this.getImageInternal(e,t,r,o)}getImageInternal(e,t,r,o){return abstract()}handleImageChange(e){const t=e.target;switch(t.getState()){case ImageState.LOADING:this.loading=!0,this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADSTART,t));break;case ImageState.LOADED:this.loading=!1,this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADEND,t));break;case ImageState.ERROR:this.loading=!1,this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADERROR,t))}}}export function defaultImageLoadFunction(e,t){e.getImage().src=t}export default ImageSource;
//# sourceMappingURL=/sm/9f8bc2a2394aae8b301df687390d76a31ab3f36aad564022e23181fd9fb47610.map