/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/ol@6.12.0/src/renderer/Layer.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import EventType from"../events/EventType.js";import ImageState from"../ImageState.js";import Observable from"../Observable.js";import SourceState from"../source/State.js";import{abstract}from"../util.js";class LayerRenderer extends Observable{constructor(e){super(),this.boundHandleImageChange_=this.handleImageChange_.bind(this),this.layer_=e,this.declutterExecutorGroup=null}getFeatures(e){return abstract()}prepareFrame(e){return abstract()}renderFrame(e,t){return abstract()}loadedTileCallback(e,t,a){e[t]||(e[t]={}),e[t][a.tileCoord.toString()]=a}createLoadedTileFinder(e,t,a){return function(r,n){const d=this.loadedTileCallback.bind(this,a,r);return e.forEachLoadedTile(t,r,n,d)}.bind(this)}forEachFeatureAtCoordinate(e,t,a,r,n){}getDataAtPixel(e,t,a){return null}getLayer(){return this.layer_}handleFontsChanged(){}handleImageChange_(e){e.target.getState()===ImageState.LOADED&&this.renderIfReadyAndVisible()}loadImage(e){let t=e.getState();return t!=ImageState.LOADED&&t!=ImageState.ERROR&&e.addEventListener(EventType.CHANGE,this.boundHandleImageChange_),t==ImageState.IDLE&&(e.load(),t=e.getState()),t==ImageState.LOADED}renderIfReadyAndVisible(){const e=this.getLayer();e.getVisible()&&e.getSourceState()==SourceState.READY&&e.changed()}}export default LayerRenderer;
//# sourceMappingURL=/sm/f72235cd012a47ca9577b7b424e2fd537624961b0682bf3699965a5d266351e3.map