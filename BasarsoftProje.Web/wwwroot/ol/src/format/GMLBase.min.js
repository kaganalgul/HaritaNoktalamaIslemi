/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/ol@6.12.0/src/format/GMLBase.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import Feature from"../Feature.js";import GeometryLayout from"../geom/GeometryLayout.js";import LineString from"../geom/LineString.js";import LinearRing from"../geom/LinearRing.js";import MultiLineString from"../geom/MultiLineString.js";import MultiPoint from"../geom/MultiPoint.js";import MultiPolygon from"../geom/MultiPolygon.js";import Point from"../geom/Point.js";import Polygon from"../geom/Polygon.js";import XMLFeature from"./XMLFeature.js";import{assign}from"../obj.js";import{extend}from"../array.js";import{getAllTextContent,getAttributeNS,makeArrayPusher,makeReplacer,parseNode,pushParseAndPop}from"../xml.js";import{get as getProjection}from"../proj.js";import{transformExtentWithOptions,transformGeometryWithOptions}from"./Feature.js";export const GMLNS="http://www.opengis.net/gml";const ONLY_WHITESPACE_RE=/^[\s\xa0]*$/;class GMLBase extends XMLFeature{constructor(e){super();const t=e||{};this.featureType=t.featureType,this.featureNS=t.featureNS,this.srsName=t.srsName,this.schemaLocation="",this.FEATURE_COLLECTION_PARSERS={},this.FEATURE_COLLECTION_PARSERS[this.namespace]={featureMember:makeArrayPusher(this.readFeaturesInternal),featureMembers:makeReplacer(this.readFeaturesInternal)},this.supportedMediaTypes=["application/gml+xml"]}readFeaturesInternal(e,t){const r=e.localName;let o=null;if("FeatureCollection"==r)o=pushParseAndPop([],this.FEATURE_COLLECTION_PARSERS,e,t,this);else if("featureMembers"==r||"featureMember"==r||"member"==r){const s=t[0];let n=s.featureType,i=s.featureNS;const a="p",p="p0";if(!n&&e.childNodes){n=[],i={};for(let t=0,r=e.childNodes.length;t<r;++t){const r=e.childNodes[t];if(1===r.nodeType){const e=r.nodeName.split(":").pop();if(-1===n.indexOf(e)){let t="",o=0;const s=r.namespaceURI;for(const e in i){if(i[e]===s){t=e;break}++o}t||(t=a+o,i[t]=s),n.push(t+":"+e)}}}"featureMember"!=r&&(s.featureType=n,s.featureNS=i)}if("string"==typeof i){const e=i;i={},i[p]=e}const m={},l=Array.isArray(n)?n:[n];for(const e in i){const t={};for(let o=0,s=l.length;o<s;++o){(-1===l[o].indexOf(":")?p:l[o].split(":")[0])===e&&(t[l[o].split(":").pop()]="featureMembers"==r?makeArrayPusher(this.readFeatureElement,this):makeReplacer(this.readFeatureElement,this))}m[i[e]]=t}o=pushParseAndPop("featureMember"==r||"member"==r?void 0:[],m,e,t)}return null===o&&(o=[]),o}readGeometryElement(e,t){const r=t[0];r.srsName=e.firstElementChild.getAttribute("srsName"),r.srsDimension=e.firstElementChild.getAttribute("srsDimension");const o=pushParseAndPop(null,this.GEOMETRY_PARSERS,e,t,this);return o?Array.isArray(o)?transformExtentWithOptions(o,r):transformGeometryWithOptions(o,!1,r):void 0}readFeatureElementInternal(e,t,r){let o;const s={};for(let n=e.firstElementChild;n;n=n.nextElementSibling){let e;const i=n.localName;0===n.childNodes.length||1===n.childNodes.length&&(3===n.firstChild.nodeType||4===n.firstChild.nodeType)?(e=getAllTextContent(n,!1),ONLY_WHITESPACE_RE.test(e)&&(e=void 0)):(r&&(e=this.readGeometryElement(n,t)),e?"boundedBy"!==i&&(o=i):e=this.readFeatureElementInternal(n,t,!1)),s[i]?(s[i]instanceof Array||(s[i]=[s[i]]),s[i].push(e)):s[i]=e;const a=n.attributes.length;if(a>0){s[i]={_content_:s[i]};for(let e=0;e<a;e++){const t=n.attributes[e].name;s[i][t]=n.attributes[e].value}}}if(r){const t=new Feature(s);o&&t.setGeometryName(o);const r=e.getAttribute("fid")||getAttributeNS(e,this.namespace,"id");return r&&t.setId(r),t}return s}readFeatureElement(e,t){return this.readFeatureElementInternal(e,t,!0)}readPoint(e,t){const r=this.readFlatCoordinatesFromNode(e,t);if(r)return new Point(r,GeometryLayout.XYZ)}readMultiPoint(e,t){const r=pushParseAndPop([],this.MULTIPOINT_PARSERS,e,t,this);return r?new MultiPoint(r):void 0}readMultiLineString(e,t){const r=pushParseAndPop([],this.MULTILINESTRING_PARSERS,e,t,this);if(r)return new MultiLineString(r)}readMultiPolygon(e,t){const r=pushParseAndPop([],this.MULTIPOLYGON_PARSERS,e,t,this);if(r)return new MultiPolygon(r)}pointMemberParser(e,t){parseNode(this.POINTMEMBER_PARSERS,e,t,this)}lineStringMemberParser(e,t){parseNode(this.LINESTRINGMEMBER_PARSERS,e,t,this)}polygonMemberParser(e,t){parseNode(this.POLYGONMEMBER_PARSERS,e,t,this)}readLineString(e,t){const r=this.readFlatCoordinatesFromNode(e,t);if(r){return new LineString(r,GeometryLayout.XYZ)}}readFlatLinearRing(e,t){const r=pushParseAndPop(null,this.GEOMETRY_FLAT_COORDINATES_PARSERS,e,t,this);return r||void 0}readLinearRing(e,t){const r=this.readFlatCoordinatesFromNode(e,t);if(r)return new LinearRing(r,GeometryLayout.XYZ)}readPolygon(e,t){const r=pushParseAndPop([null],this.FLAT_LINEAR_RINGS_PARSERS,e,t,this);if(r&&r[0]){const e=r[0],t=[e.length];let o,s;for(o=1,s=r.length;o<s;++o)extend(e,r[o]),t.push(e.length);return new Polygon(e,GeometryLayout.XYZ,t)}}readFlatCoordinatesFromNode(e,t){return pushParseAndPop(null,this.GEOMETRY_FLAT_COORDINATES_PARSERS,e,t,this)}readGeometryFromNode(e,t){const r=this.readGeometryElement(e,[this.getReadOptions(e,t||{})]);return r||null}readFeaturesFromNode(e,t){const r={featureType:this.featureType,featureNS:this.featureNS};t&&assign(r,this.getReadOptions(e,t));return this.readFeaturesInternal(e,[r])||[]}readProjectionFromNode(e){return getProjection(this.srsName?this.srsName:e.firstElementChild.getAttribute("srsName"))}}GMLBase.prototype.namespace=GMLNS,GMLBase.prototype.FLAT_LINEAR_RINGS_PARSERS={"http://www.opengis.net/gml":{}},GMLBase.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS={"http://www.opengis.net/gml":{}},GMLBase.prototype.GEOMETRY_PARSERS={"http://www.opengis.net/gml":{}},GMLBase.prototype.MULTIPOINT_PARSERS={"http://www.opengis.net/gml":{pointMember:makeArrayPusher(GMLBase.prototype.pointMemberParser),pointMembers:makeArrayPusher(GMLBase.prototype.pointMemberParser)}},GMLBase.prototype.MULTILINESTRING_PARSERS={"http://www.opengis.net/gml":{lineStringMember:makeArrayPusher(GMLBase.prototype.lineStringMemberParser),lineStringMembers:makeArrayPusher(GMLBase.prototype.lineStringMemberParser)}},GMLBase.prototype.MULTIPOLYGON_PARSERS={"http://www.opengis.net/gml":{polygonMember:makeArrayPusher(GMLBase.prototype.polygonMemberParser),polygonMembers:makeArrayPusher(GMLBase.prototype.polygonMemberParser)}},GMLBase.prototype.POINTMEMBER_PARSERS={"http://www.opengis.net/gml":{Point:makeArrayPusher(GMLBase.prototype.readFlatCoordinatesFromNode)}},GMLBase.prototype.LINESTRINGMEMBER_PARSERS={"http://www.opengis.net/gml":{LineString:makeArrayPusher(GMLBase.prototype.readLineString)}},GMLBase.prototype.POLYGONMEMBER_PARSERS={"http://www.opengis.net/gml":{Polygon:makeArrayPusher(GMLBase.prototype.readPolygon)}},GMLBase.prototype.RING_PARSERS={"http://www.opengis.net/gml":{LinearRing:makeReplacer(GMLBase.prototype.readFlatLinearRing)}};export default GMLBase;
//# sourceMappingURL=/sm/fadda83541c50a8c0ba43ed01a4869b1ae24371d477d6142249fc4ffd47cfd21.map