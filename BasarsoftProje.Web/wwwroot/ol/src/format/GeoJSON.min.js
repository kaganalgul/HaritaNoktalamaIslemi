/**
 * Minified by jsDelivr using Terser v5.10.0.
 * Original file: /npm/ol@6.12.0/src/format/GeoJSON.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import Feature from"../Feature.js";import GeometryCollection from"../geom/GeometryCollection.js";import GeometryType from"../geom/GeometryType.js";import JSONFeature from"./JSONFeature.js";import LineString from"../geom/LineString.js";import MultiLineString from"../geom/MultiLineString.js";import MultiPoint from"../geom/MultiPoint.js";import MultiPolygon from"../geom/MultiPolygon.js";import Point from"../geom/Point.js";import Polygon from"../geom/Polygon.js";import{assert}from"../asserts.js";import{assign,isEmpty}from"../obj.js";import{get as getProjection}from"../proj.js";import{transformGeometryWithOptions}from"./Feature.js";class GeoJSON extends JSONFeature{constructor(e){const t=e||{};super(),this.dataProjection=getProjection(t.dataProjection?t.dataProjection:"EPSG:4326"),t.featureProjection&&(this.defaultFeatureProjection=getProjection(t.featureProjection)),this.geometryName_=t.geometryName,this.extractGeometryName_=t.extractGeometryName,this.supportedMediaTypes=["application/geo+json","application/vnd.geo+json"]}readFeatureFromObject(e,t){let r=null;r="Feature"===e.type?e:{type:"Feature",geometry:e,properties:null};const o=readGeometry(r.geometry,t),i=new Feature;return this.geometryName_?i.setGeometryName(this.geometryName_):this.extractGeometryName_&&"geometry_name"in r!==void 0&&i.setGeometryName(r.geometry_name),i.setGeometry(o),"id"in r&&i.setId(r.id),r.properties&&i.setProperties(r.properties,!0),i}readFeaturesFromObject(e,t){let r=null;if("FeatureCollection"===e.type){r=[];const o=e.features;for(let e=0,i=o.length;e<i;++e)r.push(this.readFeatureFromObject(o[e],t))}else r=[this.readFeatureFromObject(e,t)];return r}readGeometryFromObject(e,t){return readGeometry(e,t)}readProjectionFromObject(e){const t=e.crs;let r;return t?"name"==t.type?r=getProjection(t.properties.name):"EPSG"===t.type?r=getProjection("EPSG:"+t.properties.code):assert(!1,36):r=this.dataProjection,r}writeFeatureObject(e,t){t=this.adaptOptions(t);const r={type:"Feature",geometry:null,properties:null},o=e.getId();if(void 0!==o&&(r.id=o),!e.hasProperties())return r;const i=e.getProperties(),n=e.getGeometry();return n&&(r.geometry=writeGeometry(n,t),delete i[e.getGeometryName()]),isEmpty(i)||(r.properties=i),r}writeFeaturesObject(e,t){t=this.adaptOptions(t);const r=[];for(let o=0,i=e.length;o<i;++o)r.push(this.writeFeatureObject(e[o],t));return{type:"FeatureCollection",features:r}}writeGeometryObject(e,t){return writeGeometry(e,this.adaptOptions(t))}}function readGeometry(e,t){if(!e)return null;let r;switch(e.type){case GeometryType.POINT:r=readPointGeometry(e);break;case GeometryType.LINE_STRING:r=readLineStringGeometry(e);break;case GeometryType.POLYGON:r=readPolygonGeometry(e);break;case GeometryType.MULTI_POINT:r=readMultiPointGeometry(e);break;case GeometryType.MULTI_LINE_STRING:r=readMultiLineStringGeometry(e);break;case GeometryType.MULTI_POLYGON:r=readMultiPolygonGeometry(e);break;case GeometryType.GEOMETRY_COLLECTION:r=readGeometryCollectionGeometry(e);break;default:throw new Error("Unsupported GeoJSON type: "+e.type)}return transformGeometryWithOptions(r,!1,t)}function readGeometryCollectionGeometry(e,t){const r=e.geometries.map((function(e){return readGeometry(e,t)}));return new GeometryCollection(r)}function readPointGeometry(e){return new Point(e.coordinates)}function readLineStringGeometry(e){return new LineString(e.coordinates)}function readMultiLineStringGeometry(e){return new MultiLineString(e.coordinates)}function readMultiPointGeometry(e){return new MultiPoint(e.coordinates)}function readMultiPolygonGeometry(e){return new MultiPolygon(e.coordinates)}function readPolygonGeometry(e){return new Polygon(e.coordinates)}function writeGeometry(e,t){const r=(e=transformGeometryWithOptions(e,!0,t)).getType();let o;switch(r){case GeometryType.POINT:o=writePointGeometry(e,t);break;case GeometryType.LINE_STRING:o=writeLineStringGeometry(e,t);break;case GeometryType.POLYGON:o=writePolygonGeometry(e,t);break;case GeometryType.MULTI_POINT:o=writeMultiPointGeometry(e,t);break;case GeometryType.MULTI_LINE_STRING:o=writeMultiLineStringGeometry(e,t);break;case GeometryType.MULTI_POLYGON:o=writeMultiPolygonGeometry(e,t);break;case GeometryType.GEOMETRY_COLLECTION:o=writeGeometryCollectionGeometry(e,t);break;case GeometryType.CIRCLE:o={type:"GeometryCollection",geometries:[]};break;default:throw new Error("Unsupported geometry type: "+r)}return o}function writeGeometryCollectionGeometry(e,t){return{type:"GeometryCollection",geometries:e.getGeometriesArray().map((function(e){const r=assign({},t);return delete r.featureProjection,writeGeometry(e,r)}))}}function writeLineStringGeometry(e,t){return{type:"LineString",coordinates:e.getCoordinates()}}function writeMultiLineStringGeometry(e,t){return{type:"MultiLineString",coordinates:e.getCoordinates()}}function writeMultiPointGeometry(e,t){return{type:"MultiPoint",coordinates:e.getCoordinates()}}function writeMultiPolygonGeometry(e,t){let r;return t&&(r=t.rightHanded),{type:"MultiPolygon",coordinates:e.getCoordinates(r)}}function writePointGeometry(e,t){return{type:"Point",coordinates:e.getCoordinates()}}function writePolygonGeometry(e,t){let r;return t&&(r=t.rightHanded),{type:"Polygon",coordinates:e.getCoordinates(r)}}export default GeoJSON;
//# sourceMappingURL=/sm/5e829d181f1b3346ab6e2eda18afb4d85d3a26a73850a7f8af524725a4c18b0b.map